추천 시스템
1. 콘텐츠 기반 필터링
2. 협업 필터링
+ deep learning으로 하이브리드

협업 필터링
1. 메모리 기반 협업 (최근접 이웃 기반)
2. 잠재요인

콘텐츠 기반은 예전
요새는 협업 필터링이 주
latent factor collaborative filtering -> 잠재적 요인 협업 필터링

콘텐츠 기반 필터링
특정 아이템 선호 시 그 아이템과 비슷한 콘텐츠를 가진 다른 아이템을 추천.
ex) 사용자 A가 itemA에 높은 평점을 주었다면 그 Item이 액션 영화이며 이수진이라는
감독이었다면 이수진 감독의 다른 액션영화를 추천해주는 로직.


협업 필터링
1. 최근접 이웃 기반
2. 잠재요인 협업 필터링


최근접 이웃 기반
사용자가 아이템에 매긴 평점, 상품 구매 이력 등의 사용자 행동 양식을 기반으로 추천해주는 방식.
최근접 이웃 기반은 사용자-아이템 행렬에서 사용자가 아직 평가하지 않은 아이템을 예측하는 것이 목표
사용자-아이템 평점 행렬과 같은 모습을 데이터가 취해야 함.
column은 아이템, row가 유저
이렇게 데이터를 바꾸면 sparse한 형태를 가지기 때문에 공간 낭비(데이터들이 희소.)

최근접 이웃 기반은 사용자기반, 아이템 기반의 두가지 방법이 있다.
사용자 기반 -> 비슷한 고객들이 ~한 item을 소비
아이템 기반 -> ~한 item을 소비한 고객들은 다음과 같은 상품도 구매

사용자 기반의 협업 필터링
column이 아이템 row가 유저
아이템 기반 협업 필터링
column이 유저, row가 아이템


보통 아이템 기반 협업 필터링이 좀 더 정확도가 높음.


주피터 노트북에서 콘텐츠 기반 필터링 구현
기본 로직
1. 영화 제목이 들어오면 영화 제목을 가지고 있는 index를 뽑아냄
2. 코사인 유사도 중 영화 제목 인덱스에 해당하는 값에서 추천 개수만큼 뽑아냄.
3. 본인은 제외시킴
4. imdb weighted rating을 적용한 score 기반으로 정렬
5. 이를 Python DataFrame으로 만들고 return


협업 필터링
1. 아이템 기반 협업 필터링
2. 행렬 분해 기반 협업 필터링

-> 사용자 행동 양식을 기반으로 추천해줌
아이템 기반 협업 필터링을 수행하기 위해선 데이터 전처리 후 pivot table을 만들어야 함.
즉, 사용자-영화에 따른 평점 점수가 데이터로 들어가야함.
pivot_table을 사용하고 데이터 분포
- data: 영화 평점 rating
- index: 영화 title
- column: userId


아이템 기반 협업 필터링 추천 시스템 같은 경우에는 유사한 아이템끼리 추천을 해준다.
영화 추천의 경우에는 유사한 아이템으로 평점이 비슷한 아이템.















